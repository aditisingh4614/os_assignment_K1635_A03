#include<stdio.h>
#include<pthread.h>
#include<unistd.h>
#include<stdbool.h>
int P=5;
int R=4;
int need[5][4];
pthread_mutex_t lock;
struct safe
{
	int process[5];
	int avail[4];
	int max[5][4];
	int allot[5][4];
}s1={{0,1,2,3,4},{1,5,2,0},{{0,0,1,2},{1,7,5,0},{2,3,5,6},{0,6,5,2},{0,6,5,6}},{{0,0,1,2},{1,0,0,0},{1,3,5,4},{0,6,3,2},{0,0,1,4}}};
//s1={{0,1,2,3,4},{3,3,2},{{7,5,3},{3,3,2},{9,0,2},{2,2,2},{4,3,3}},{{0,1,0},{2,0,0},{3,0,2},{2,1,1},{0,0,2}}};
void *Calneed(void *arguments)
{
	struct safe *s2=arguments;
	pthread_mutex_lock(&lock);
	int i,j;
	for(i=0;i<P;i++)
	for(j=0;j<R;j++)
	{
		need[i][j]=s2->max[i][j]-s2->allot[i][j];
	}
	pthread_mutex_unlock(&lock);
	printf("\n NEED MATRIX : \n");
	for(i=0;i<P;i++)
	{
		printf("p%d : ",i);
	for(j=0;j<4;j++)
	{
	    printf("%d ",need[i][j]);	
	}
	printf("\n");
}
	
}
	int main()
	{
	    pthread_mutex_init(&lock,NULL);
		pthread_t th,th1;
		pthread_create(&th,NULL,Calneed,&s1);
		pthread_join(th1,NULL);
	}



